
// DYNAMIC:		"HAS_SHADOW"		"0..1"


#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"

sampler sNormals							: register( s0 );
sampler sDepth								: register( s1 );
#if !DEFCFG_LIGHTCTRL_PACKING
sampler sLightCtrl							: register( s3 );
#endif

#if HAS_SHADOW
sampler sShadowDepth						: register( s2 );
#endif

sampler sLightmap							: register( s4 );

const float3 g_vecViewOrigin				: register( c0 );
const float3 g_vecLightVec_Forward			: register( c1 );

const float4x3 g_matOrtho[2]				: register( c2 );
const float4 g_vecUVTransform[2]			: register( c8 );
const float3 g_vecSlopeData[2]				: register( c10 );
const float4 g_vecFilterConfig_A[2]			: register( c12 );
const float4 g_vecFilterConfig_B[2]			: register( c14 );

const float3 g_light_diffuse				: register( c16 );
const float3 g_light_ambient_high			: register( c17 );
const float3 g_light_ambient_low_half		: register( c18 );

const float	 g_lightmap_scale				: register( c19 );

struct PS_INPUT
{
	float2 vTexCoord				: TEXCOORD0;

	float3 vecWorldRay				: TEXCOORD1;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

float Luminance(float3 cColor)
{
	// Formula for calculating luminance based on NTSC standard
	return dot(cColor.rgb, float3(0.2125, 0.7154, 0.0721));
}

PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out = (PS_OUTPUT)0;

	float flDepth = tex2D( sDepth, In.vTexCoord ).x;

	clip( flDepth - 0.1f );

	float phong_exp;
	bool half_lambert, litface;

	float4 flNormalCtrl = tex2D( sNormals, In.vTexCoord );
	float3 flNormal = normalize( flNormalCtrl.xyz * 2.0f - 1.0f );
	
#if !DEFCFG_LIGHTCTRL_PACKING
	{
		float4 flLightCtrl = tex2D( sLightCtrl, In.vTexCoord );
		phong_exp = flLightCtrl.x;
		half_lambert = flLightCtrl.y;
		litface = flLightCtrl.z;
	}
#else
	UnpackLightingControls( flNormalCtrl.a, phong_exp, half_lambert, litface );
#endif

	float3 flLitNormal = lerp( 1, dot( flNormal, g_vecLightVec_Forward ), litface ) * flNormal;

	float flSpecular = max( 0, dot( normalize( -In.vecWorldRay + g_vecLightVec_Forward ), flLitNormal ) );
	flSpecular = pow( flSpecular, phong_exp ) * dot( -In.vecWorldRay, flLitNormal );

	float viewFwdDot = dot( g_vecLightVec_Forward.xyz, flLitNormal );

	float lightAmount = 1.0;

#if HAS_SHADOW
	if ( flDepth < DEPTH_RECONSTRUCTION_LIMIT )
	{
		float3 worldPos = g_vecViewOrigin + In.vecWorldRay * flDepth;

		float shadowMult = PerformCascadedShadow( sShadowDepth, worldPos, g_matOrtho, g_vecUVTransform, g_vecSlopeData,
									g_vecFilterConfig_A, g_vecFilterConfig_B, flLitNormal, viewFwdDot );

#if 0
		// fixes self shadowing for half lambertian, but, i don't like it!
		lightAmount *= max( shadowMult, (1.0f - saturate( viewFwdDot )) * half_lambert );
#else
		lightAmount *= shadowMult;
#endif
	}
#endif

	float4 lightmap = tex2D(sLightmap, In.vTexCoord);
	lightmap.rgb *= g_lightmap_scale;
	
	lightAmount = saturate(lightmap.a * lightAmount);

	float3 indirect = lightmap.rgb;
	float3 blended = lightAmount * g_light_diffuse + indirect;
	 //??? how;
	
	float4 lighting = float4(blended, flSpecular * lightAmount * lightmap.a);
	Out.vColor_0 = WriteLighting( lighting );

	return Out;
}
